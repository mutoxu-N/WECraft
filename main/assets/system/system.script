require "main.assets.items.recipes"

local camera = require "orthographic.camera"
local CAMERA_ID = hash("/camera")
local festival = false

function init(self)
	msg.post(".", "acquire_input_focus")
	self.crosshair = vmath.vector3()
	self.crosshair.x = go.get_position("/cursor").x
	self.crosshair.y = go.get_position("/cursor").y
	self.camera_offset = vmath.vector3()
	msg.post("camera", "enable")
	msg.post(CAMERA_ID, "follow", { target = "/player"})
	camera.bounds(CAMERA_ID, -2560, 720, -1280, 0)
	--windowの設定
	defos.disable_window_resize()
	defos.disable_minimize_button(festival)
	defos.disable_maximize_button(true)
	defos.set_always_on_top(festival) --文化祭用だけ変える
	display = defos.get_displays()
	display_id = defos.get_current_display_id()
	if not defos.is_fullscreen() then
		defos.set_view_size((display[display_id].bounds.width - 1280) / 2, (display[display_id].bounds.height - 720) / 2, 1280, 720)
	end
	defos.set_window_icon("/main/icon.ico")
	defos.set_console_visible(false)
	gamestatus = false
	tutorialstatus = false
	mission_cleared = false
	msg.post("gui", "delete_having_item")
	set_having_item_name("none")

	--log
	os.execute("mkdir Games")
	local log = io.open("Games/WECraft Info.txt", "w")
	log:write("OHOLというゲームのパロディーとして作成しました。\n\n")
	log:write("-----------------------------------------------------------\n")
	log:write("Game Name : "..sys.get_config("project.title").."\n")
	log:write("Version   : "..sys.get_config("project.version").."\n")
	log:write("Author    : mutoxu=N\n")
	log:write("WEB       : http://jakuden.thyme.jp/wec/ \n")
	log:write("Twitter   : @TohoWEC (https://twitter.com/TohoWEC) \n")
	log:write("-----------------------------------------------------------\n")
	io.close(log)
end

function final(self)
	first_start = false
end

function update(self, dt)
	--ゲームが開始後はカーソルの位置と[cursor]オブジェクトの位置を同期する
	if not gamestatus then return end
	local cursor_pos = camera.screen_to_world(CAMERA_ID, self.crosshair)
	cursor_pos = vmath.lerp(0.5, go.get_position("/cursor"), cursor_pos)
	go.set_position(cursor_pos, "/cursor")
end

function on_input(self, action_id, action)
	--カーソルの位置
	if action_id == nil then
		self.crosshair.x = action.x
		self.crosshair.y = action.y
	elseif action.pressed then
		if action_id == hash("toggle_fullscrean") and festival then
			defos.toggle_fullscreen()
			if tutorialstatus then
				if defos.is_fullscreen() then
					camera.bounds(CAMERA_ID, -4000, 2270, -1866, 1000)
				else
					camera.bounds(CAMERA_ID, -4000, 2510, -1440, 1000)
				end
			elseif gamestatus then
				if defos.is_fullscreen() then
					camera.bounds(CAMERA_ID, 0, 2710, 4694, 0)
				else
					camera.bounds(CAMERA_ID, 0, 2950, 5120, 0)
				end
			end
		elseif action_id == hash("profiler") then
			msg.post("@system:", "toggle_profile")
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("gamestart") then
		gamestart()
	elseif message_id == hash("gameend") then
		gameend()
	elseif message_id == hash("tutorialstart") then
		tutorialstatus = true
		gamestart()
	end
end

function get_camera_position()
	return camera.screen_to_world_bounds(CAMERA_ID)
end

function gamestart()
	--ゲームスタート
	gamestatus = true
	if tutorialstatus then
		-- チュートリアルのとき
		mission_item = "axe"
		if defos.is_fullscreen() then
			camera.bounds(CAMERA_ID, -4000, 2270, -1866, 1000)
		else
			camera.bounds(CAMERA_ID, -4000, 2510, -1440, 1000)
		end
	else
		if difficulty == 5 then
			--impossible
			mission_item = mission_item_list[4][1]
		else
		--mission item設定
			math.randomseed(os.time()*os.clock())
			local rnd = math.random(#mission_item_list[difficulty])
			mission_item = mission_item_list[difficulty][rnd]
		end
		msg.post("gui", "set_item_name", {text = "目標のアイテムは「"..english_to_japanese(mission_item).."」になりました！"})
		if defos.is_fullscreen() then
			camera.bounds(CAMERA_ID, 0, 2710, 4694, 0)
		else
			camera.bounds(CAMERA_ID, 0, 2950, 5120, 0)
		end
	end
	msg.post(CAMERA_ID, "follow", { target = "/player"})
  msg.post("gui", "gamestart")
end


function gameend()
	--ゲーム終了
	msg.post("camera", "enable")
  msg.post("gui", "gameend")
	--カメラの設定
	camera.bounds(CAMERA_ID, -2280, 720, -1560, 0)
	camera.follow(CAMERA_ID, hash("/menu_manager"))
end
