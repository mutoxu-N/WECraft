function init(self)
  -- 管理用変数設定
  msg.post(".", "acquire_input_focus")
  dead_bg = gui.get_node("dead_bg")
  dead_pic = gui.get_node("dead_pic")
	death_message = gui.get_node("death_message")
	death_text = gui.get_node("death_text")
	death_text1 = gui.get_node("death_text1")
	dead_button = gui.get_node("dead_button")
  hide_dead()
  gui.set_enabled(gui.get_node("dead_bg"), false)
end



function on_message(self, message_id, message, sender)
  if message_id == hash("show_dead") then
    show_dead(message.message)
  elseif message_id == hash("hide_dead") then
    hide_dead()
  elseif message_id == hash("gamestart") then
    gui.set_enabled(gui.get_node("dead_bg"), true)
  end
end

function on_input(self, action_id, action)
  --プレイヤーが生きている時は無視
  if player_exist then return end
  --GUIが表示されてないときは無視
  if not menu_status["dead"] then return end
  --ボタンクリック
  if (action_id == hash("rightclick") or action_id == hash("leftclick")) and gui.pick_node(dead_button, action.x, action.y) and action.pressed then
    if mission_item == "cat_tomb" and mission_cleared then
      hide_dead()
      msg.post("gui", "show_clear")
    else
      msg.post("main:/proxy", "reboot")
    end
  end


end

function show_dead(message)
  if menu_status["dead"] then return end
  gamestatus = false
  msg.post("gui", "hide")
  gui.set_color(dead_bg, vmath.vector4(gui.get_color(dead_bg).x, 0, 0, 0.1))
  gui.set_color(dead_pic, vmath.vector4(gui.get_color(dead_pic).x, gui.get_color(dead_pic).y, gui.get_color(dead_pic).z, 1))
  gui.play_flipbook(dead_pic, "dead")
  gui.set_color(death_message, vmath.vector4(gui.get_color(death_message).x, gui.get_color(death_message).y, gui.get_color(death_message).z, 1))
  gui.set_color(death_text, vmath.vector4(gui.get_color(death_text).x, gui.get_color(death_text).y, gui.get_color(death_text).z, 1))
  gui.set_color(death_text1, vmath.vector4(gui.get_color(death_text1).x, gui.get_color(death_text1).y, gui.get_color(death_text1).z, 1))
  gui.set_text(death_message, message)
  gui.animate(dead_button, "position.y", 60, gui.EASING_OUTEXPO, 1.2, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
  menu_status["dead"] = true
  sound.play("#namu")
end

function hide_dead()
  gui.set_color(dead_bg, vmath.vector4(gui.get_color(dead_bg).x, 0, 0, 0))
  gui.set_color(dead_pic, vmath.vector4(gui.get_color(dead_pic).x, gui.get_color(dead_pic).y, gui.get_color(dead_pic).z, 0))
  gui.set_color(death_message, vmath.vector4(gui.get_color(death_message).x, gui.get_color(death_message).y, gui.get_color(death_message).z, 0))
  gui.set_color(death_text, vmath.vector4(gui.get_color(death_text).x, gui.get_color(death_text).y, gui.get_color(death_text).z, 0))
  gui.set_color(death_text1, vmath.vector4(gui.get_color(death_text1).x, gui.get_color(death_text1).y, gui.get_color(death_text1).z, 0))
  gui.animate(dead_button, "position.y", -60, gui.EASING_OUTEXPO, 1.2, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
  menu_status["dead"] = false
end
