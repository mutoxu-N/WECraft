local diff_flag = false
local anim_flag = false

function init(self)
  msg.post("main:/proxy#game", "acquire_input_focus")
  -- 管理用変数設定
  start_button = gui.get_node("start_button")
  tutorial_button = gui.get_node("tutorial_button")
  quit_button = gui.get_node("quit_button")
  player_viewer = gui.get_node("player")
  title_viewer = gui.get_node("title")
  difficulty_text = gui.get_node("difficulty_text")
  diff_buttons = {gui.get_node("easy"), gui.get_node("normal"), gui.get_node("hard"), gui.get_node("extreme"), gui.get_node("impossible"), gui.get_node("back")}
  diff_texts = {gui.get_node("easy_text"), gui.get_node("normal_text"), gui.get_node("hard_text"), gui.get_node("extreme_text"), gui.get_node("impossible_text"), gui.get_node("back_text")}
  msg.post(".", "acquire_input_focus")
  msg.post("@system:", "set_update_frequency", { frequency = 60 } )
  reload_display(diff_flag)
  -- animation 1段階目
  gui.animate(title_viewer, "position.y", 360, gui.EASING_OUTBOUNCE, 2, 0, anim1, gui.PLAYBACK_ONCE_FORWARD)
  gui.animate(gui.get_node("go_tutorial_text"), "position.y", -92, gui.EASING_INOUTSINE, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
end

function anim1()
  -- animation 2段階目
  gui.animate(title_viewer, "scale", vmath.vector3(1, 1, 1), gui.EASING_INOUTSINE, 1, 0.3, anim2, gui.PLAYBACK_ONCE_FORWARD)
  gui.animate(title_viewer, "position.y", 545, gui.EASING_INOUTSINE, 1, 0.3, nil, gui.PLAYBACK_ONCE_FORWARD)
end

function anim2()
  -- animation 3段階目
  gui.animate(start_button, "position.x", 640, gui.EASING_OUTCUBIC, 1, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
  gui.animate(tutorial_button, "position.x", 640, gui.EASING_OUTCUBIC, 1, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
  gui.animate(quit_button, "position.x", 640, gui.EASING_OUTCUBIC, 1, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
  gui.animate(title_viewer, "position.y", 540, gui.EASING_INOUTSINE, 2, 0, anim3, gui.PLAYBACK_LOOP_PINGPONG)
  gui.animate(player_viewer, "position.x", 1400, gui.EASING_INQUINT, 3, 0, nil, gui.PLAYBACK_LOOP_FORWARD)
  gui.animate(player_viewer, "rotation.z", 6, gui.EASING_OUTINCIRC, 0.2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
  anim_flag = true
end


function on_message(self, message_id, message, sender)
	if message_id == hash("gamestart") then
    -- 開始時に非表示
    reload_display("invisible")
  end
end

function on_input(self, action_id, action)
  if (action_id == hash("leftclick") or action_id == hash("rightclick")) and action.pressed then
    --menu button
    if gamestatus or not player_exist then return end
    if menu_status["clear"] then return end
    if diff_flag then
      --難易度選択画面
      local is
      for i=1,#diff_buttons do
        if gui.pick_node(diff_buttons[i], action.x, action.y) then
          if i == #diff_buttons then
            reload_display(false)
            return
          else
              difficulty = i
              if i <= 2 then
                --初回起動時 eazy normal
                if first_start or food_reduce_period == 3 or food_reduce_period == 5 then food_reduce_period = 8 end
              elseif food_reduce_period == 3 or food_reduce_period == 8 then
                --hard extreme impossible
                food_reduce_period = 5
              end
              msg.post("menu_manager", "gamestart")
          end
        end
      end
    else
      --初期画面
      if gui.pick_node(start_button, action.x, action.y) then
        --遊ぶ
        reload_display(true)
      elseif gui.pick_node(tutorial_button, action.x, action.y) then
        msg.post("menu_manager", "tutorialstart")
        msg.post("block", "tutorialstart")
        msg.post("/player", "tutorial")
        speed = 400
        difficulty = 6
        mission_item = "axe"
      elseif gui.pick_node(quit_button, action.x, action.y) then
        if gamestatus then return end
          msg.post("main:/proxy", "quit")
      end

    end
  elseif action_id == hash("menu") then
    if not anim_flag then
      gui.cancel_animation(title_viewer, "position")
      gui.set_scale(title_viewer, vmath.vector3(1, 1, 1))
      gui.set_position(title_viewer, vmath.vector3(640, 545, 0))
      anim2()
    end
  end
end

function reload_display(value)
  local i, j, k
  diff_flag = value --f: 最初 t:難易度
  if diff_flag == "invisible" then
    --全非表示
    j = 0
    k = 0
  elseif diff_flag then
    --難易度画面表示
    j = 1
    k = 0
  else
    --難易度画面非表示
    j = 0
    k = 1
  end
  gui.set_color(start_button, vmath.vector4(gui.get_color(start_button).x, gui.get_color(start_button).y, gui.get_color(start_button).z, k))
  gui.set_color(tutorial_button, vmath.vector4(gui.get_color(tutorial_button).x, gui.get_color(tutorial_button).y, gui.get_color(tutorial_button).z, k))
  gui.set_color(quit_button, vmath.vector4(gui.get_color(quit_button).x, gui.get_color(quit_button).y, gui.get_color(quit_button).z, k))
  gui.set_color(player_viewer, vmath.vector4(gui.get_color(player_viewer).x, gui.get_color(player_viewer).y, gui.get_color(player_viewer).z, k))
  gui.set_color(title_viewer, vmath.vector4(gui.get_color(title_viewer).x, gui.get_color(title_viewer).y, gui.get_color(title_viewer).z, k))

  gui.set_color(difficulty_text, vmath.vector4(gui.get_color(difficulty_text).x, gui.get_color(difficulty_text).y, gui.get_color(difficulty_text).z, j))
  for i = 1, #diff_buttons do
    gui.set_color(diff_buttons[i], vmath.vector4(gui.get_color(diff_buttons[i]).x, gui.get_color(diff_buttons[i]).y, gui.get_color(diff_buttons[i]).z, j))
    gui.set_color(diff_texts[i], vmath.vector4(gui.get_color(diff_texts[i]).x, gui.get_color(diff_texts[i]).y, gui.get_color(diff_texts[i]).z, j))
  end
end
