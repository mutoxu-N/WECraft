function init(self)
  -- 管理用変数設定
  manual_bg = gui.get_node("background")
  manual_close = gui.get_node("manual_close")
  manual_picture = gui.get_node("picture")
  manual_set_visible(false)

end

function on_message(self, message_id, message, sender)
	if message_id == hash("show_manual") then
    manual_set_visible(true)
  elseif message_id == hash("hide_manual") then
    manual_set_visible(false)
  end
end

function on_input(self, action_id, action)
  if (action_id == hash("leftclick") or action_id == hash("rightclick")) and action.pressed then
    --menu button
    if not gamestatus then return end
    if not menu_status["manual"] then return end
    if gui.pick_node(manual_close, action.x, action.y) then
      manual_set_visible(false)
    end
  end
end

function manual_set_visible(value)
  if value then
    -- show
    gui.set_color(manual_bg, vmath.vector4(0 ,0 ,0 ,0.5))
    gui.set_color(manual_close, vmath.vector4(gui.get_color(manual_close).x, gui.get_color(manual_close).y, gui.get_color(manual_close).z, 1))
    gui.set_color(manual_picture, vmath.vector4(gui.get_color(manual_picture).x, gui.get_color(manual_picture).y, gui.get_color(manual_picture).z, 1))
    gui.set_position(manual_close, vmath.vector3(640, -50, 0))
    gui.animate(manual_close, "position.y", 60, gui.EASING_OUTEXPO, 1.2, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
    menu_status["manual"] = true
  else
    --hide
    gui.set_color(manual_bg, vmath.vector4(0 ,0 ,0 ,0))
    gui.set_color(manual_close, vmath.vector4(gui.get_color(manual_close).x, gui.get_color(manual_close).y, gui.get_color(manual_close).z, 0))
    gui.set_color(manual_picture, vmath.vector4(gui.get_color(manual_picture).x, gui.get_color(manual_picture).y, gui.get_color(manual_picture).z, 0))
    menu_status["manual"] = false
  end
end
